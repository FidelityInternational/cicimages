#!/usr/bin/env bash

CURRENT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# shellcheck source=image/bin/support/sh/functions/cic.sh
source "${CURRENT_PATH}/support/sh/functions/cic.sh"

# shellcheck source=image/bin/support/sh/functions/wrapped_commands.sh
source "${CURRENT_PATH}/support/sh/functions/wrapped_commands.sh"

exercise_name="$(basename "$(pwd)")"
volume_path="$(volume_path ansible)/${exercise_name}"

if [[ ! -f "${SCAFFOLD_STRUCTURE}" ]]
then
    echo "Please set path to your exercise scaffold YAML file against the environment variable SCAFFOLD_STRUCTURE"
fi

if [[ ! -d "${SCAFFOLD_PATH}" ]]
then
    echo "Please set path to your exercise scaffold directory file against the environment variable SCAFFOLD_PATH"
fi


copy_to_cic_volume "$(pwd)/." "${volume_path}"

command="$(bootstrap_cic_environment) SCAFFOLD_PATH=/mnt/scaffold SCAFFOLD_STRUCTURE=/mnt/scaffold_structure.yml $(build_command exercise "$@")"

subcommand=$1
if [ "${subcommand}" == "generate" ] || [ "${subcommand}" == "requiring_update" ]; then
    command="${command} --digest-component=$(cic_image)"
fi

# shellcheck disable=SC2140
docker run -t \
    --network "$(cic_network)" \
    --volumes-from "$(cic_volumes_container)" \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v "$(tracks_path)":/cic/tracks \
    -v "${SCAFFOLD_PATH}":/mnt/scaffold \
    -v "${SCAFFOLD_STRUCTURE}":/mnt/scaffold_structure.yml \
    -w "${volume_path}" \
    "$(cic_image)" \
    /bin/bash -ilc "${command}"

exit_code=$?
docker cp "$(cic_volumes_container):${volume_path}/." .
exit "${exit_code}"